// регулярные выражения мощный способ поиска и замены для строк (способ поиска совпадений шаблона с текстом)

// синтаксис
// let regexp = new RegExp('pattern', flags);
// let regexp = /pattern/flags

// let tag = prompt('Введите html тег', 'h2');
// let regexp = new RegExp(`<${tag}>`);
// console.log(regexp); // /<h2>/

// flags
/* 
i; // мы хотим выполнить поиск который не зависит от регистра
g; // ищем все совпадения а не только первое
m; // позволяет включить многострочный режим
s; // включает режим dot при котором точка может соответств символу перевода строки /n
u; // включает полную поддержку юникода
y; // режим поиска на конкретной позиции в тексте
*/

// спецсимволы
// . - любой одиночный символ найти шаблон соответств букве и любому другому символу b. или b.. или b...
// [] - любой из них те [Bb] большое либо маленькое. Диапазон [a-d], [0-9], дробь [0-9].[0-9], [sw].., не содержат [^sw]..
// $ - конец
// \ - обратный слеш это экранирование \.$ - найти точку и конец строки
// ^ начало строки - новая строка ^T- буквы начин с большой букв T
// \n - перенос строки
// \d - любая единичная цифра  \d\d - 2; \d\d\d - три любых цифры подряд [0-9][0-9][0-9]

// ^[^b] - найти строки которые начинаются не с b

// examples
let str = 'Строка, ещё одна строка';
console.log(str.match(/Строка/gi)); // данный метод позволяет найти что-то в строке, но может и искать регулярное выражение = ['Строка', 'строка']
console.log(str.match(/Строка/g)); // ['Строка'] - только первое вхождение
console.log(str.match(/Строка/)); // ['Строка', index: 0, input: 'Строка, ещё одна строка', groups: undefined, lenght: 1]
console.log(str.match(/Стка/)); // null - те не существует
// замена
console.log(str.replace(/строка/gi, 'Новая строка')); // Новая строка, ещё одна Новая строка
console.log(str.replace(/строка/gi, '$& 1')); // к нашему слову которое ищем добавляем через пробел 1
console.log(str.replace(/строка/gi, '$& ку-ку ')); // Строка ку-ку , ещё одна строка ку-ку
console.log(/строка/gi.test(str)); // true
console.log(/стр2ока/gi.test(str)); // false

let str2 = document.querySelector('a').textContent;
let regexp2 = /\d/g; // \d - позволяет искать цифры 0-9, символный класс
let number2 = str2.match(regexp2).join('');
console.log(number2); // ['7', '9', '9', '5', '1', '2', '5', '7', '8', '9', '6']
// console.log(number2.join('')); // '7,9,9,5,1,2,5,7,8,9,6'
document.querySelector('a').setAttribute('href', `tel:+${number2}`); // номер автоматически подставился в href
// \s - позволяет найти все пробельные символы
// \w - ищет буквы латинского алфавита - цифры или _
// \d\s\w 4
// \D - любой символ кроме чисел on 0-9
// \u - работа с символами юникода
